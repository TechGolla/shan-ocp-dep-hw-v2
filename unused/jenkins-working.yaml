def mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"

  pipeline {
    agent {
      label 'maven'
    }
    stages {
      stage('Build App') {
        steps {
          git branch: 'eap-7', url: 'http://gogs:3000/gogs/openshift-tasks.git'
          sh "${mvnCmd} install -DskipTests=true"
        }
      }
      stage('Test') {
        steps {
          sh "${mvnCmd} test"
          step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
        }
      }
      stage('Archive App') {
        steps {
          sh "${mvnCmd} deploy -DskipTests=true -P nexus3"
        }
      }
      stage('Build Image') {
        steps {
          sh "cp target/openshift-tasks.war target/ROOT.war"
          script {
            openshift.withCluster() {
              openshift.withProject(env.DEV_PROJECT) {
                openshift.selector("bc", "tasks").startBuild("--from-file=target/ROOT.war", "--wait=true")
              }
            }
          }
        }
      }
      stage('Deploy to DEV') {
        steps {
          script {
            openshift.withCluster() {
              openshift.withProject(env.DEV_PROJECT) {
                openshift.selector("dc", "tasks").rollout().latest();
              }
            }
          }
        }
      }
      stage('Deploy to TEST') {
       steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}/tasks:stage");
              openshift.selector("dc", "tasks").rollout().latest();
            }
          }
        }
      }
     }
      stage('Promote to Prod') {
       steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.PROD_PROJECT) {
                openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.PROD_PROJECT}/tasks:prod");
            }
          }
        }
        sh "sleep 120";
      }
     }
      stage('Deploy to PROD') {
        steps {
          script {
            openshift.withCluster() {
              openshift.withProject(env.PROD_PROJECT) {
                openshift.selector("dc", "tasks").rollout().latest();
              }
            }
          }
        }
      }
    }
  }
